# -*- coding: utf-8 -*-
"""ofi_features.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y9sEypXl5wuXMVeD9tnn6uNRHkhzr8sM
"""

import pandas as pd
import numpy as np

# Load the data
df = pd.read_csv('/content/first_25000_rows.csv')

# Convert timestamps and sort
df['ts_event'] = pd.to_datetime(df['ts_event'])
df = df.sort_values('ts_event').reset_index(drop=True)

# Compute deltas at best level (level 0)
df['delta_bid_price'] = df['bid_px_00'].diff()
df['delta_ask_price'] = df['ask_px_00'].diff()
df['delta_bid_size'] = df['bid_sz_00'].diff()
df['delta_ask_size'] = df['ask_sz_00'].diff()

# Compute Best-Level OFI
df['ofi_best_level'] = (
    df['delta_bid_size'] * (df['delta_bid_price'] > 0).astype(int)
    - df['delta_ask_size'] * (df['delta_ask_price'] < 0).astype(int)
)

# Show output
df[['ts_event', 'bid_px_00', 'ask_px_00', 'bid_sz_00', 'ask_sz_00', 'ofi_best_level']].head(10)

code = '''
import pandas as pd
import numpy as np

df = pd.read_csv('first_25000_rows.csv')
df['ts_event'] = pd.to_datetime(df['ts_event'])
df = df.sort_values('ts_event').reset_index(drop=True)

df['delta_bid_price'] = df['bid_px_00'].diff()
df['delta_ask_price'] = df['ask_px_00'].diff()
df['delta_bid_size'] = df['bid_sz_00'].diff()
df['delta_ask_size'] = df['ask_sz_00'].diff()

df['ofi_best_level'] = (
    df['delta_bid_size'] * (df['delta_bid_price'] > 0).astype(int)
    - df['delta_ask_size'] * (df['delta_ask_price'] < 0).astype(int)
)
'''

with open("ofi_features.py", "w") as f:
    f.write(code)

# Compute multi-level OFI by summing OFI over levels 0–9
ofi_levels = []

for i in range(10):
    bid_px_col = f'bid_px_0{i}'
    ask_px_col = f'ask_px_0{i}'
    bid_sz_col = f'bid_sz_0{i}'
    ask_sz_col = f'ask_sz_0{i}'

    # Compute price and size differences for each level
    delta_bid_price = df[bid_px_col].diff()
    delta_ask_price = df[ask_px_col].diff()
    delta_bid_size = df[bid_sz_col].diff()
    delta_ask_size = df[ask_sz_col].diff()

    # Compute OFI for this level
    ofi = (
        delta_bid_size * (delta_bid_price > 0).astype(int)
        - delta_ask_size * (delta_ask_price < 0).astype(int)
    )

    ofi_levels.append(ofi)

# Combine all levels and compute total multi-level OFI
multi_ofi_df = pd.concat(ofi_levels, axis=1)
df['ofi_multi_level'] = multi_ofi_df.sum(axis=1)

# Preview the results
df[['ts_event', 'ofi_best_level', 'ofi_multi_level']].head(10)

# Integrated OFI Using PCA
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Step 1: Stack all level-wise OFIs (from earlier loop)
multi_ofi_matrix = pd.concat(ofi_levels, axis=1)
multi_ofi_matrix.columns = [f'ofi_lvl_{i}' for i in range(10)]

# Step 2: Fill NaNs and standardize the matrix
scaler = StandardScaler()
ofi_scaled = scaler.fit_transform(multi_ofi_matrix.fillna(0))

# Step 3: Apply PCA to reduce to 1 component
pca = PCA(n_components=1)
integrated_ofi = pca.fit_transform(ofi_scaled)

# Step 4: Add it to the main dataframe
df['ofi_integrated'] = integrated_ofi

# Optional: Preview result
df[['ts_event', 'ofi_best_level', 'ofi_multi_level', 'ofi_integrated']].head(10)

df['symbol'].unique()

"""Since the dataset contains only a single asset (AAPL), we simulated a cross-asset OFI setup by splitting the AAPL data into pseudo "assets" using random or structured sampling. In a real multi-asset environment, we would:

- Compute OFI for asset A (e.g., AAPL)

- Lag or align it with asset B (e.g., MSFT)

- Use Lasso regression or Granger causality to test predictive power
"""

# Simulated Cross-Asset OFI (with Lasso Regression)
from sklearn.linear_model import LassoCV
from sklearn.metrics import r2_score

# Create lag and lead versions of integrated OFI
df['ofi_integrated_lag'] = df['ofi_integrated'].shift(5)    # pretend this is another asset (B)
df['ofi_integrated_lead'] = df['ofi_integrated'].shift(-5)  # future values (AAPL 5 ticks ahead)

# Drop NaNs
cross_df = df[['ofi_integrated_lag', 'ofi_integrated_lead']].dropna()

# Define features and target
X = cross_df[['ofi_integrated_lag']]
y = cross_df['ofi_integrated_lead']

# Fit Lasso regression (automatic alpha tuning)
lasso = LassoCV(cv=5).fit(X, y)

# Predict and evaluate
y_pred = lasso.predict(X)
r2 = r2_score(y, y_pred)

print(f"Lasso R² score (simulated cross-asset): {r2:.4f}")
print(f"Lasso coefficient: {lasso.coef_[0]:.4f}")

"""Simulated Cross-Asset OFI Result:

Due to the absence of multiple assets in the dataset, we simulated cross-asset effects by lagging AAPL’s own integrated OFI signal and testing its ability to predict future OFI via Lasso regression. The resulting R² score was 0.000, and the Lasso coefficient was 0.000, suggesting no predictive relationship. This outcome reinforces the importance of using genuinely distinct assets when studying cross-impact dynamics.
"""